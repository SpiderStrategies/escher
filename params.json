{"tagline":"Stackable backbone views","body":"# Escher\r\n\r\n### Stackable backbone views\r\n\r\nEscher is a [Backbone](http://backbonejs.org) extension for managing stacks of views. Views can be pushed or popped onto the stack. The stack builds views into a sheet-based UI.\r\n\r\nDepends on [Underscore](http://underscorejs.org), [Backbone](http://backbonejs.org) and [jQuery](http://jquery.com) -- the same dependencies backbone.\r\n\r\n### Download\r\n\r\nDownload the Dev or Prod (uglified) [vesions](https://raw.github.com/SpiderStrategies/escher/master/dist/).\r\n\r\n#### Non-AMD\r\n\r\n```\r\n  <!-- Include jquery, backbone, underscore -->\r\n  <script src=\"/assets/vendor/escher.js\"></script>\r\n```\r\n\r\n#### Using with AMD\r\n\r\nDefine the path for escher and then you can require it.  Escher adds itself to Backbone, so the define returns backbone.\r\n\r\n```\r\nmain.js\r\n {\r\n  paths:\r\n    { escher: '/vendor/backbone/plugins/escher'}\r\n }\r\n```\r\n\r\nThen simply require it, so it loads itself into backbone\r\n```\r\ndefine('core', ['escher'], function (Backbone) {\r\n  // Escher is loaded into backbone\r\n})\r\n```\r\n\r\n### Usage\r\n\r\nCreate a backbone view that will server as the base layer in the stack.\r\n\r\n```\r\nHelloView = Backbone.View.extend({\r\n  attributes: {\r\n    style: \"width: 100%; height: 100%; position: absolute;\"\r\n  },\r\n\r\n  render: function () {\r\n    this.$el.html('Hey ohh')\r\n    return this\r\n  }\r\n})\r\n\r\nvar hv = new HelloView\r\n\r\n// Throw the view on the page\r\n$('#container').append(hv.render().el)\r\n```\r\n\r\nCreate escher, passing it configuration settings.  At a bare minimum, pass it the base view.\r\n\r\n```\r\nvar mcescher = Backbone.Escher({ base: hv })\r\n```\r\n\r\nBuild a new view for the next layer.\r\n\r\n```\r\nPainting = Backbone.View.extend({\r\n\r\n  render: function () {\r\n    this.$el.html(\"Relativity is aweesome.\")\r\n    return this\r\n  }\r\n\r\n})\r\n\r\n```\r\n\r\nAnd finally you can stack views...\r\n\r\n```\r\nmcescher.push(new Painting)\r\n```\r\n\r\nRemove the top view\r\n\r\n```\r\nmcescher.pop()\r\n```\r\n\r\nEach retreat link is wrapped by a div with a classname of **escher-step-retreat**, so it can be styled.  Every view managed by escher will have a classname of **escher-step** applied.\r\n\r\n#### Events\r\nBackbone.View#view:activate -> Fired when a view is on top of the stack.\r\nBackbone.View#view:deactivate -> Fired when a view is popped or dropped back on the stack.\r\nEscher#changing -> Fired before the stack changes.\r\nEscher#changed -> Fired after the stack has changed state.\r\n\r\n### Configuration\r\n\r\ntopOffset: 15\r\nleftOffset: 5\r\nlabelField: 'name'\r\n\r\n#### Testing\r\n\r\nTests use mocha and chai.assert.  Install these dependencies.\r\n\r\n```\r\nnpm install -d\r\n```\r\n\r\nRun the tests\r\n```\r\nmake test\r\n```\r\n","google":"","name":"Escher","note":"Don't delete this file! It's used internally to help with page regeneration."}